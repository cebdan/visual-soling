# Visual Solving UI Advanced V2 - UI —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
# PyQt6 implementation with variable@solution and variable.solution support
# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ò–ú–ü–û–†–¢–´ PyQt6

import sys
from PyQt6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                            QHBoxLayout, QTreeWidget, QTreeWidgetItem, QTableWidget, 
                            QTableWidgetItem, QSplitter, QMenuBar, QFileDialog, 
                            QDialog, QFormLayout, QLineEdit, QDoubleSpinBox, 
                            QComboBox, QPushButton, QLabel, QTextEdit, QCheckBox,
                            QListWidget, QMessageBox, QHeaderView, QTabWidget,
                            QGroupBox, QGridLayout, QScrollArea, QSpinBox, QPlainTextEdit,
                            QCompleter)
from PyQt6.QtCore import Qt, pyqtSignal, QTimer, QStringListModel  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: QStringListModel –∏–∑ QtCore
from PyQt6.QtGui import QAction, QFont, QColor, QTextCharFormat, QTextCursor, QSyntaxHighlighter
import json
import traceback
import re

# –ò–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã V2
try:
    from variable_system_v2 import (
        ExpressionParser, V2FormulaEvaluator, V2Variable, V2Solution,
        ExpressionType
    )
    from visual_solving_advanced_v2 import (
        HybridSolution, HybridBoxSolution as BoxSolution, HybridEdgeBandingSolution as EdgeBandingSolution, 
        Part3DSpace, HybridVariable, VariableType, v2_solution_manager,
        V2GlobalVariableRegistry, v2_dependency_tracker
    )
    CORE_V2_AVAILABLE = True
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ V2 —è–¥—Ä–∞: {e}")
    CORE_V2_AVAILABLE = False

# =============================================================================
# –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã V2
# =============================================================================

class V2FormulaHighlighter(QSyntaxHighlighter):
    """–ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –¥–ª—è —Ñ–æ—Ä–º—É–ª V2 (variable@solution –∏ variable.solution)"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        # –§–æ—Ä–º–∞—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.formats = {}
        
        # –ó–∞–ø–∏—Å—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (variable@solution)
        self.formats['variable_write'] = QTextCharFormat()
        self.formats['variable_write'].setForeground(QColor("#cc6600"))
        self.formats['variable_write'].setFontWeight(QFont.Weight.Bold)
        
        # –ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (variable.solution)
        self.formats['variable_read'] = QTextCharFormat()
        self.formats['variable_read'].setForeground(QColor("#0066cc"))
        self.formats['variable_read'].setFontWeight(QFont.Weight.Bold)
        
        # –ß–∏—Å–ª–∞
        self.formats['number'] = QTextCharFormat()
        self.formats['number'].setForeground(QColor("#009900"))
        
        # –û–ø–µ—Ä–∞—Ç–æ—Ä—ã
        self.formats['operator'] = QTextCharFormat()
        self.formats['operator'].setForeground(QColor("#cc0066"))
        self.formats['operator'].setFontWeight(QFont.Weight.Bold)
        
        # –§—É–Ω–∫—Ü–∏–∏
        self.formats['function'] = QTextCharFormat()
        self.formats['function'].setForeground(QColor("#9900cc"))
        self.formats['function'].setFontWeight(QFont.Weight.Bold)
        
        # @ —Å–∏–º–≤–æ–ª
        self.formats['at_symbol'] = QTextCharFormat()
        self.formats['at_symbol'].setForeground(QColor("#ff6600"))
        self.formats['at_symbol'].setFontWeight(QFont.Weight.Bold)
        
        # –°–∏–º–≤–æ–ª —Ç–æ—á–∫–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è
        self.formats['dot_symbol'] = QTextCharFormat()
        self.formats['dot_symbol'].setForeground(QColor("#0099cc"))
        self.formats['dot_symbol'].setFontWeight(QFont.Weight.Bold)
    
    def highlightBlock(self, text):
        # –ó–∞–ø–∏—Å—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: variable@solution
        write_pattern = r'([a-zA-Z_][a-zA-Z0-9_]*)(@)([a-zA-Z_][a-zA-Z0-9_]*)'
        for match in re.finditer(write_pattern, text):
            # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è
            self.setFormat(match.start(1), match.end(1) - match.start(1), self.formats['variable_write'])
            # @ —Å–∏–º–≤–æ–ª
            self.setFormat(match.start(2), match.end(2) - match.start(2), self.formats['at_symbol'])
            # Solution
            self.setFormat(match.start(3), match.end(3) - match.start(3), self.formats['variable_write'])
        
        # –ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: variable.solution
        read_pattern = r'([a-zA-Z_][a-zA-Z0-9_]*)(\.)([a-zA-Z_][a-zA-Z0-9_]*)'
        for match in re.finditer(read_pattern, text):
            # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è
            self.setFormat(match.start(1), match.end(1) - match.start(1), self.formats['variable_read'])
            # . —Å–∏–º–≤–æ–ª
            self.setFormat(match.start(2), match.end(2) - match.start(2), self.formats['dot_symbol'])
            # Solution
            self.setFormat(match.start(3), match.end(3) - match.start(3), self.formats['variable_read'])
        
        # –ß–∏—Å–ª–∞
        number_pattern = r'\b\d+(\.\d+)?\b'
        for match in re.finditer(number_pattern, text):
            self.setFormat(match.start(), match.end() - match.start(), self.formats['number'])
        
        # –û–ø–µ—Ä–∞—Ç–æ—Ä—ã
        operator_pattern = r'[+\-*/^()=]'
        for match in re.finditer(operator_pattern, text):
            self.setFormat(match.start(), match.end() - match.start(), self.formats['operator'])
        
        # –§—É–Ω–∫—Ü–∏–∏
        function_pattern = r'\b(sin|cos|tan|sqrt|abs|min|max|round)\b'
        for match in re.finditer(function_pattern, text):
            self.setFormat(match.start(), match.end() - match.start(), self.formats['function'])

# =============================================================================
# –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã V2
# =============================================================================

class V2VariableCompleter(QCompleter):
    """–ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö V2"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setCompletionMode(QCompleter.CompletionMode.PopupCompletion)
        self.setCaseSensitivity(Qt.CaseSensitivity.CaseInsensitive)
        self.update_completions()
    
    def update_completions(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if not CORE_V2_AVAILABLE:
            return
        
        completions = []
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ solutions
        all_solutions = v2_solution_manager.get_all_solutions()
        
        for solution_name, solution in all_solutions.items():
            for var_name in solution.variables.keys():
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏
                completions.append(f"{var_name}@{solution_name}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —á—Ç–µ–Ω–∏—è
                completions.append(f"{var_name}.{solution_name}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        functions = ['sin', 'cos', 'tan', 'sqrt', 'abs', 'min', 'max', 'round']
        completions.extend(functions)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
        model = QStringListModel(completions)
        self.setModel(model)

# =============================================================================
# –û–∫–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö V2
# =============================================================================

class V2GlobalVariableRegistryWindow(QMainWindow):
    """–û–∫–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞ –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö V2"""
    
    variable_updated = pyqtSignal(str)  # –°–∏–≥–Ω–∞–ª –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Global Variable Registry V2 - New Syntax")
        self.setGeometry(200, 200, 1400, 900)
        
        self._setup_ui()
        self._refresh_data()
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.refresh_timer = QTimer()
        self.refresh_timer.timeout.connect(self._refresh_data)
        self.refresh_timer.start(2000)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    
    def _setup_ui(self):
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        layout = QVBoxLayout()
        
        # –ü–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞
        search_layout = QHBoxLayout()
        search_layout.addWidget(QLabel("Search V2:"))
        
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("Search by variable@solution, variable.solution, aliases...")
        self.search_input.textChanged.connect(self._filter_variables)
        search_layout.addWidget(self.search_input)
        
        refresh_btn = QPushButton("Refresh")
        refresh_btn.clicked.connect(self._refresh_data)
        search_layout.addWidget(refresh_btn)
        
        layout.addLayout(search_layout)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ
        syntax_info = QLabel("üí° New V2 Syntax: variable@solution=value (write), variable.solution (read), L=600 (alias)")
        syntax_info.setStyleSheet("color: #666; font-style: italic; padding: 5px;")
        layout.addWidget(syntax_info)
        
        # –í–∫–ª–∞–¥–∫–∏
        self.tab_widget = QTabWidget()
        
        # –í–∫–ª–∞–¥–∫–∞ 1: –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ V2
        self._setup_variables_v2_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 2: –ì—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π V2
        self._setup_dependencies_v2_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ V2
        self._setup_statistics_v2_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–π V2
        self._setup_expression_test_tab()
        
        layout.addWidget(self.tab_widget)
        central_widget.setLayout(layout)
        
        # –ú–µ–Ω—é
        self._setup_menu()
    
    def _setup_variables_v2_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ V2"""
        variables_widget = QWidget()
        layout = QVBoxLayout()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.variables_table = QTableWidget()
        self.variables_table.setColumnCount(10)
        self.variables_table.setHorizontalHeaderLabels([
            "Solution", "Write ID (V2)", "Read ID (V2)", "Legacy ID", "Name", 
            "Value/Formula", "Type", "Aliases", "Dependencies", "Dependents"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
        header = self.variables_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)  # Solution
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.ResizeToContents)  # Write ID
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.ResizeToContents)  # Read ID
        header.setSectionResizeMode(3, QHeaderView.ResizeMode.ResizeToContents)  # Legacy ID
        header.setSectionResizeMode(4, QHeaderView.ResizeMode.ResizeToContents)  # Name
        header.setSectionResizeMode(5, QHeaderView.ResizeMode.Stretch)           # Value/Formula
        header.setSectionResizeMode(6, QHeaderView.ResizeMode.ResizeToContents)  # Type
        header.setSectionResizeMode(7, QHeaderView.ResizeMode.ResizeToContents)  # Aliases
        header.setSectionResizeMode(8, QHeaderView.ResizeMode.ResizeToContents)  # Dependencies
        header.setSectionResizeMode(9, QHeaderView.ResizeMode.ResizeToContents)  # Dependents
        
        # –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.variables_table.cellDoubleClicked.connect(self._edit_variable_v2)
        
        layout.addWidget(self.variables_table)
        variables_widget.setLayout(layout)
        
        self.tab_widget.addTab(variables_widget, "All Variables V2")
    
    def _setup_dependencies_v2_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ V2"""
        dependencies_widget = QWidget()
        layout = QVBoxLayout()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_label = QLabel("Dependency Graph V2 - Variables with formulas using new syntax")
        info_label.setStyleSheet("font-weight: bold; color: #666;")
        layout.addWidget(info_label)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞
        self.dependencies_text = QTextEdit()
        self.dependencies_text.setFont(QFont("Courier", 10))
        self.dependencies_text.setReadOnly(True)
        layout.addWidget(self.dependencies_text)
        
        dependencies_widget.setLayout(layout)
        self.tab_widget.addTab(dependencies_widget, "Dependencies V2")
    
    def _setup_statistics_v2_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π V2"""
        stats_widget = QWidget()
        layout = QVBoxLayout()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_text = QTextEdit()
        self.stats_text.setFont(QFont("Courier", 10))
        self.stats_text.setReadOnly(True)
        layout.addWidget(self.stats_text)
        
        stats_widget.setLayout(layout)
        self.tab_widget.addTab(stats_widget, "Statistics V2")
    
    def _setup_expression_test_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏–π V2"""
        test_widget = QWidget()
        layout = QVBoxLayout()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_label = QLabel("Test V2 Expressions - variable@solution=value, variable.solution, L=600")
        info_label.setStyleSheet("font-weight: bold; color: #0066cc;")
        layout.addWidget(info_label)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        input_layout = QHBoxLayout()
        input_layout.addWidget(QLabel("Expression:"))
        
        self.expression_input = QLineEdit()
        self.expression_input.setPlaceholderText("length@box=600, width@result=width.panel-2*thickness.edge, L=400")
        
        # –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
        self.completer = V2VariableCompleter()
        self.expression_input.setCompleter(self.completer)
        
        input_layout.addWidget(self.expression_input)
        
        test_btn = QPushButton("Test Expression")
        test_btn.clicked.connect(self._test_expression_v2)
        input_layout.addWidget(test_btn)
        
        layout.addLayout(input_layout)
        
        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        self.highlighter = V2FormulaHighlighter(self.expression_input.document())
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        self.test_result = QTextEdit()
        self.test_result.setMaximumHeight(200)
        self.test_result.setFont(QFont("Courier", 10))
        layout.addWidget(self.test_result)
        
        # –ü—Ä–∏–º–µ—Ä—ã
        examples_group = QGroupBox("Examples")
        examples_layout = QVBoxLayout()
        
        examples = [
            ("Assignment", "length@box=600"),
            ("Formula", "width@result=width.panel - 2*thickness.edge"),
            ("Math", "diagonal@panel=sqrt(length.panel^2 + width.panel^2)"),
            ("Alias", "L=600"),
            ("Read", "a=volume.box")
        ]
        
        for name, example in examples:
            btn = QPushButton(f"{name}: {example}")
            btn.clicked.connect(lambda checked, ex=example: self._load_example(ex))
            examples_layout.addWidget(btn)
        
        examples_group.setLayout(examples_layout)
        layout.addWidget(examples_group)
        
        test_widget.setLayout(layout)
        self.tab_widget.addTab(test_widget, "Expression Test V2")
    
    def _setup_menu(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é"""
        menubar = self.menuBar()
        
        # File menu
        file_menu = menubar.addMenu("File")
        
        export_action = QAction("Export Variables V2 to JSON", self)
        export_action.triggered.connect(self._export_variables_v2)
        file_menu.addAction(export_action)
        
        # Tools menu
        tools_menu = menubar.addMenu("Tools")
        
        validate_action = QAction("Validate All V2 Expressions", self)
        validate_action.triggered.connect(self._validate_all_expressions_v2)
        tools_menu.addAction(validate_action)
        
        migrate_action = QAction("Help: Legacy to V2 Migration", self)
        migrate_action.triggered.connect(self._show_migration_help)
        tools_menu.addAction(migrate_action)
    
    def _refresh_data(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–∫–∞—Ö"""
        if not CORE_V2_AVAILABLE:
            return
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            self._update_variables_table_v2()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            self._update_dependencies_view_v2()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_statistics_v2()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
            self.completer.update_completions()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö V2: {e}")
    
    def _update_variables_table_v2(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö V2"""
        variables_info = V2GlobalVariableRegistry.get_all_variables_info()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞
        search_term = self.search_input.text().lower()
        if search_term:
            variables_info = [var for var in variables_info if self._matches_search_v2(var, search_term)]
        
        self.variables_table.setRowCount(len(variables_info))
        
        for row, var_info in enumerate(variables_info):
            # Solution
            solution_name = var_info.get('solution_name', 'Unknown')
            self.variables_table.setItem(row, 0, QTableWidgetItem(solution_name))
            
            # Write ID (V2)
            write_id = var_info.get('new_write_id', '')
            write_id_item = QTableWidgetItem(write_id)
            write_id_item.setForeground(QColor("#cc6600"))
            self.variables_table.setItem(row, 1, write_id_item)
            
            # Read ID (V2)
            read_id = var_info.get('new_read_id', '')
            read_id_item = QTableWidgetItem(read_id)
            read_id_item.setForeground(QColor("#0066cc"))
            self.variables_table.setItem(row, 2, read_id_item)
            
            # Legacy ID
            legacy_id = var_info.get('legacy_full_id', '')
            legacy_id_item = QTableWidgetItem(legacy_id)
            legacy_id_item.setForeground(QColor("#999999"))
            self.variables_table.setItem(row, 3, legacy_id_item)
            
            # Name
            self.variables_table.setItem(row, 4, QTableWidgetItem(var_info.get('name', '')))
            
            # Value/Formula
            if var_info.get('is_formula', False):
                formula = var_info.get('formula', '')
                computed = var_info.get('computed_value', 0)
                value_text = f"= {formula} ‚Üí {computed}"
                value_item = QTableWidgetItem(value_text)
                value_item.setForeground(QColor("#cc6600"))
            else:
                value_text = str(var_info.get('value', ''))
                value_item = QTableWidgetItem(value_text)
            
            self.variables_table.setItem(row, 5, value_item)
            
            # Type
            var_type = var_info.get('type', 'unknown')
            type_item = QTableWidgetItem(var_type)
            if var_type == 'formula':
                type_item.setForeground(QColor("#cc6600"))
            elif var_type == 'controllable':
                type_item.setForeground(QColor("#009900"))
            self.variables_table.setItem(row, 6, type_item)
            
            # Aliases
            aliases = var_info.get('aliases', [])
            aliases_text = ", ".join(aliases) if aliases else ""
            self.variables_table.setItem(row, 7, QTableWidgetItem(aliases_text))
            
            # Dependencies
            dependencies = var_info.get('dependencies', [])
            deps_text = ", ".join(dependencies) if dependencies else ""
            self.variables_table.setItem(row, 8, QTableWidgetItem(deps_text))
            
            # Dependents
            dependents = var_info.get('dependents', [])
            dependents_text = ", ".join(dependents) if dependents else ""
            self.variables_table.setItem(row, 9, QTableWidgetItem(dependents_text))
    
    def _update_dependencies_view_v2(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π V2"""
        text = "DEPENDENCY GRAPH V2 - New Syntax\n"
        text += "=" * 60 + "\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏
        all_solutions = v2_solution_manager.get_all_solutions()
        formula_vars = []
        
        for solution_name, solution in all_solutions.items():
            for var_name, var in solution.variables.items():
                if var.is_formula:
                    formula_vars.append((solution_name, var_name, var))
        
        if not formula_vars:
            text += "No formula variables found.\n"
        else:
            for solution_name, var_name, var in formula_vars:
                text += f"{var.read_id}: {var.name}\n"
                text += f"  Write: {var.full_id}\n"
                text += f"  Formula: {var.formula}\n"
                
                if var.dependencies:
                    text += f"  Depends on: {', '.join(var.dependencies)}\n"
                else:
                    text += f"  Depends on: none\n"
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                dependents = v2_dependency_tracker.get_dependent_variables(var.read_id)
                if dependents:
                    text += f"  Used by: {', '.join(dependents)}\n"
                else:
                    text += f"  Used by: none\n"
                
                text += "\n"
        
        self.dependencies_text.setText(text)
    
    def _update_statistics_v2(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É V2"""
        all_solutions = v2_solution_manager.get_all_solutions()
        
        total_solutions = len(all_solutions)
        total_variables = 0
        formula_count = 0
        alias_count = 0
        
        for solution in all_solutions.values():
            total_variables += len(solution.variables)
            alias_count += len(solution.aliases)
            
            for var in solution.variables.values():
                if var.is_formula:
                    formula_count += 1
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_text = "GLOBAL REGISTRY STATISTICS V2\n"
        stats_text += "=" * 40 + "\n\n"
        
        stats_text += f"Solutions: {total_solutions}\n"
        stats_text += f"Variables: {total_variables}\n"
        stats_text += f"Formula Variables: {formula_count}\n"
        stats_text += f"Aliases: {alias_count}\n\n"
        
        if total_variables > 0:
            formula_percentage = (formula_count / total_variables * 100)
            stats_text += f"Formula Percentage: {formula_percentage:.1f}%\n"
        
        stats_text += f"\nV2 Syntax Usage:\n"
        stats_text += f"  ‚Ä¢ Write syntax: variable@solution=value\n"
        stats_text += f"  ‚Ä¢ Read syntax: variable.solution\n"
        stats_text += f"  ‚Ä¢ Local aliases: L, W, H (isolated per solution)\n"
        
        # –¢–æ–ø Solution –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if all_solutions:
            stats_text += f"\nVariables per Solution:\n"
            for solution_name, solution in all_solutions.items():
                var_count = len(solution.variables)
                formula_count_sol = sum(1 for var in solution.variables.values() if var.is_formula)
                stats_text += f"  {solution_name}: {var_count} variables ({formula_count_sol} formulas)\n"
        
        self.stats_text.setText(stats_text)
    
    def _matches_search_v2(self, var_info: dict, search_term: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É V2"""
        searchable_fields = [
            var_info.get('name', ''),
            var_info.get('new_write_id', ''),
            var_info.get('new_read_id', ''),
            var_info.get('legacy_full_id', ''),
            var_info.get('solution_name', ''),
        ]
        
        # –ü–æ–∏—Å–∫ –≤ –∞–ª–∏–∞—Å–∞—Ö
        aliases = var_info.get('aliases', [])
        searchable_fields.extend(aliases)
        
        # –ü–æ–∏—Å–∫ –≤ —Ñ–æ—Ä–º—É–ª–µ
        if var_info.get('is_formula') and var_info.get('formula'):
            searchable_fields.append(var_info['formula'])
        
        return any(search_term in field.lower() for field in searchable_fields)
    
    def _filter_variables(self):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞"""
        self._update_variables_table_v2()
    
    def _edit_variable_v2(self, row: int, column: int):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é V2"""
        if column != 5:  # –¢–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–∫–∞ Value/Formula
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        write_id_item = self.variables_table.item(row, 1)
        if not write_id_item:
            return
        
        write_id = write_id_item.text()
        # –ü–∞—Ä—Å–∏–º write_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è solution –∏ variable
        if '@' in write_id:
            var_name, solution_name = write_id.split('@')
            solution = v2_solution_manager.get_solution(solution_name)
            if solution and var_name in solution.variables:
                variable = solution.variables[var_name]
                
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                dialog = V2VariableEditDialog(variable, solution_name, self)
                if dialog.exec() == QDialog.DialogCode.Accepted:
                    self.variable_updated.emit(write_id)
                    self._refresh_data()
    
    def _test_expression_v2(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ V2"""
        expression = self.expression_input.text().strip()
        if not expression:
            return
        
        try:
            # –ü–∞—Ä—Å–∏–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
            parsed = ExpressionParser.parse_expression(expression)
            
            result_text = f"Expression: {expression}\n"
            result_text += f"Type: {parsed['type'].value}\n"
            result_text += "-" * 40 + "\n"
            
            for key, value in parsed.items():
                if key != 'type':
                    result_text += f"{key}: {value}\n"
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ä–º—É–ª–∞, –ø—ã—Ç–∞–µ–º—Å—è –≤—ã—á–∏—Å–ª–∏—Ç—å
            if parsed['type'] == ExpressionType.FORMULA:
                try:
                    formula = parsed['formula']
                    solution_registry = v2_solution_manager.get_all_solutions()
                    result = V2FormulaEvaluator.evaluate_formula(formula, solution_registry)
                    result_text += f"\nComputed Result: {result}\n"
                except Exception as e:
                    result_text += f"\nComputation Error: {e}\n"
            
            result_text += "\n‚úÖ Expression is valid!\n"
            
        except Exception as e:
            result_text = f"Expression: {expression}\n"
            result_text += f"‚ùå Parse Error: {e}\n"
        
        self.test_result.setText(result_text)
    
    def _load_example(self, example: str):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–º–µ—Ä –≤—ã—Ä–∞–∂–µ–Ω–∏—è"""
        self.expression_input.setText(example)
        self._test_expression_v2()
    
    def _export_variables_v2(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö V2 –≤ JSON"""
        filename, _ = QFileDialog.getSaveFileName(
            self, "Export Variables V2", "variables_v2.json", "JSON Files (*.json)"
        )
        
        if filename:
            try:
                variables_info = V2GlobalVariableRegistry.get_all_variables_info()
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(variables_info, f, indent=2, ensure_ascii=False)
                
                QMessageBox.information(self, "Success", f"Variables V2 exported to {filename}")
            except Exception as e:
                QMessageBox.critical(self, "Error", f"Export failed: {str(e)}")
    
    def _validate_all_expressions_v2(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è V2"""
        all_solutions = v2_solution_manager.get_all_solutions()
        
        valid_count = 0
        error_count = 0
        errors = []
        
        for solution in all_solutions.values():
            for var in solution.variables.values():
                if var.is_formula:
                    try:
                        var.get_computed_value(all_solutions)
                        if var.computation_error:
                            error_count += 1
                            errors.append(f"{var.read_id}: {var.computation_error}")
                        else:
                            valid_count += 1
                    except Exception as e:
                        error_count += 1
                        errors.append(f"{var.read_id}: {str(e)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = f"V2 Expression Validation Results:\n\n"
        result_text += f"Valid expressions: {valid_count}\n"
        result_text += f"Expressions with errors: {error_count}\n\n"
        
        if errors:
            result_text += "Errors:\n"
            for error in errors[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 –æ—à–∏–±–æ–∫
                result_text += f"  ‚Ä¢ {error}\n"
            
            if len(errors) > 20:
                result_text += f"  ... and {len(errors) - 20} more errors"
        
        msg = QMessageBox(self)
        msg.setWindowTitle("V2 Expression Validation")
        msg.setText(result_text)
        msg.setTextFormat(Qt.TextFormat.PlainText)
        msg.exec()
    
    def _show_migration_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å Legacy –Ω–∞ V2"""
        help_text = """MIGRATION FROM LEGACY TO V2 SYNTAX

Old Syntax (#1.length) ‚Üí New Syntax (variable@solution)

WRITING VALUES:
Legacy: panel.variables.get_variable_by_reference("#1").value = 600
V2:     length@panel=600

READING VALUES:
Legacy: panel.variables.get_variable_by_reference("#1").value
V2:     length.panel

FORMULAS:
Legacy: "#1.width - 2 * #2.thickness"
V2:     "width.panel - 2*thickness.edge"

ALIASES:
Legacy: #1.L (global reference)
V2:     L (local to solution only)

BENEFITS OF V2:
‚úÖ More intuitive: length@panel vs #1.length
‚úÖ Readable formulas: width.panel - 2*thickness.edge
‚úÖ Safe aliases: isolated per solution
‚úÖ Clear semantics: @ for write, . for read
‚úÖ Backward compatible: #1.length still works

MIGRATION STRATEGY:
1. Start using V2 syntax for new variables
2. Gradually convert existing formulas
3. Test expressions in Expression Test V2 tab
4. Use HybridSolution for compatibility
"""
        
        msg = QMessageBox(self)
        msg.setWindowTitle("Legacy to V2 Migration Help")
        msg.setText(help_text)
        msg.setTextFormat(Qt.TextFormat.PlainText)
        msg.exec()

class V2VariableEditDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π V2"""
    
    def __init__(self, variable: V2Variable, solution_name: str, parent=None):
        super().__init__(parent)
        self.variable = variable
        self.solution_name = solution_name
        self.setWindowTitle(f"Edit Variable V2 - {variable.read_id}")
        self.setFixedSize(600, 500)
        
        self._setup_ui()
    
    def _setup_ui(self):
        layout = QVBoxLayout()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        info_group = QGroupBox("Variable Information V2")
        info_layout = QFormLayout()
        
        info_layout.addRow("Write ID:", QLabel(self.variable.full_id))
        info_layout.addRow("Read ID:", QLabel(self.variable.read_id))
        info_layout.addRow("Name:", QLabel(self.variable.name))
        info_layout.addRow("Solution:", QLabel(self.variable.solution_name))
        
        info_group.setLayout(info_layout)
        layout.addWidget(info_group)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è/—Ñ–æ—Ä–º—É–ª—ã
        edit_group = QGroupBox("Value / Expression V2")
        edit_layout = QVBoxLayout()
        
        if self.variable.is_formula:
            edit_layout.addWidget(QLabel("Expression (V2 Syntax):"))
            self.expression_edit = QPlainTextEdit()
            self.expression_edit.setPlainText(f"{self.variable.name}@{self.solution_name}={self.variable.formula}")
            self.expression_edit.setMaximumHeight(100)
            
            # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ V2
            highlighter = V2FormulaHighlighter(self.expression_edit.document())
            
            edit_layout.addWidget(self.expression_edit)
            
            # –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            test_btn = QPushButton("Test V2 Expression")
            test_btn.clicked.connect(self._test_expression)
            edit_layout.addWidget(test_btn)
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç
            self.result_label = QLabel()
            self.result_label.setWordWrap(True)
            edit_layout.addWidget(self.result_label)
            
            self._test_expression()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            
        else:
            edit_layout.addWidget(QLabel("Value:"))
            self.value_edit = QLineEdit()
            self.value_edit.setText(str(self.variable._value))
            edit_layout.addWidget(self.value_edit)
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ V2
            expression_btn = QPushButton("Convert to V2 Expression")
            expression_btn.clicked.connect(self._convert_to_expression)
            edit_layout.addWidget(expression_btn)
        
        edit_group.setLayout(edit_layout)
        layout.addWidget(edit_group)
        
        # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ V2
        if self.variable.is_formula:
            deps_group = QGroupBox("Dependencies V2")
            deps_layout = QVBoxLayout()
            
            if self.variable.dependencies:
                deps_text = "Depends on: " + ", ".join(self.variable.dependencies)
            else:
                deps_text = "No dependencies"
            deps_layout.addWidget(QLabel(deps_text))
            
            dependents = v2_dependency_tracker.get_dependent_variables(self.variable.read_id)
            if dependents:
                dependents_text = "Used by: " + ", ".join(dependents)
            else:
                dependents_text = "Not used by any variables"
            deps_layout.addWidget(QLabel(dependents_text))
            
            deps_group.setLayout(deps_layout)
            layout.addWidget(deps_group)
        
        # –ü—Ä–∏–º–µ—Ä—ã V2 —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        examples_group = QGroupBox("V2 Syntax Examples")
        examples_layout = QVBoxLayout()
        
        examples_text = """Examples:
‚Ä¢ length@panel=600                    (set value)
‚Ä¢ width@result=width.panel-2*thickness.edge    (formula)
‚Ä¢ diagonal@panel=sqrt(length.panel^2+width.panel^2)  (math)
‚Ä¢ L=600                              (local alias)"""
        
        examples_layout.addWidget(QLabel(examples_text))
        examples_group.setLayout(examples_layout)
        layout.addWidget(examples_group)
        
        # –ö–Ω–æ–ø–∫–∏
        button_layout = QHBoxLayout()
        
        ok_btn = QPushButton("Apply")
        cancel_btn = QPushButton("Cancel")
        
        ok_btn.clicked.connect(self.accept)
        cancel_btn.clicked.connect(self.reject)
        
        button_layout.addWidget(ok_btn)
        button_layout.addWidget(cancel_btn)
        
        layout.addLayout(button_layout)
        self.setLayout(layout)
    
    def _test_expression(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ V2"""
        if not hasattr(self, 'expression_edit'):
            return
        
        expression = self.expression_edit.toPlainText().strip()
        
        try:
            parsed = ExpressionParser.parse_expression(expression)
            
            if parsed['type'] == ExpressionType.FORMULA:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É–ª—É
                formula = parsed['formula']
                solution_registry = v2_solution_manager.get_all_solutions()
                result = V2FormulaEvaluator.evaluate_formula(formula, solution_registry)
                
                self.result_label.setText(f"‚úÖ Result: {result}")
                self.result_label.setStyleSheet("color: green;")
            else:
                self.result_label.setText(f"‚úÖ Valid {parsed['type'].value} expression")
                self.result_label.setStyleSheet("color: green;")
                
        except Exception as e:
            self.result_label.setText(f"‚ùå Error: {str(e)}")
            self.result_label.setStyleSheet("color: red;")
    
    def _convert_to_expression(self):
        """–ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ V2"""
        current_value = self.value_edit.text()
        
        # –°–æ–∑–¥–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ V2
        if '.' in current_value or '@' in current_value:
            QMessageBox.information(self, "Info", "Value already looks like a V2 expression")
        else:
            new_expression = f"{self.variable.name}@{self.solution_name}={current_value}"
            self.value_edit.setText(new_expression)
    
    def accept(self):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        try:
            solution_registry = v2_solution_manager.get_all_solutions()
            solution = solution_registry.get(self.solution_name)
            
            if not solution:
                QMessageBox.critical(self, "Error", f"Solution '{self.solution_name}' not found")
                return
            
            if self.variable.is_formula and hasattr(self, 'expression_edit'):
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
                expression = self.expression_edit.toPlainText().strip()
                solution.execute_expression(expression, solution_registry)
                
            elif hasattr(self, 'value_edit'):
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                new_value = self.value_edit.text().strip()
                if '.' in new_value or '@' in new_value:
                    # –≠—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ V2
                    solution.execute_expression(new_value, solution_registry)
                else:
                    # –û–±—ã—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    expression = f"{self.variable.name}@{self.solution_name}={new_value}"
                    solution.execute_expression(expression, solution_registry)
            
            super().accept()
            
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Failed to update variable: {str(e)}")

# =============================================================================
# –î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π V2
# =============================================================================

class V2CreateBoxDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Create Box Solution V2 - New Syntax")
        self.setFixedSize(500, 400)
        
        self._setup_ui()
    
    def _setup_ui(self):
        layout = QFormLayout()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–æ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ
        info_label = QLabel("Using new V2 syntax: variable@solution and variable.solution")
        info_label.setStyleSheet("color: #0066cc; font-weight: bold;")
        layout.addRow("", info_label)
        
        self.name_edit = QLineEdit("panel")
        layout.addRow("Solution Name:", self.name_edit)
        
        # –ü–æ–ª—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π V2 —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        length_group = QGroupBox("Length (V2 Syntax)")
        length_layout = QVBoxLayout()
        self.length_edit = QLineEdit("600")
        self.length_edit.setPlaceholderText("600 or length.otherpanel or width.panel-20...")
        
        # –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
        self.length_completer = V2VariableCompleter()
        self.length_edit.setCompleter(self.length_completer)
        
        length_layout.addWidget(self.length_edit)
        length_group.setLayout(length_layout)
        layout.addRow(length_group)
        
        width_group = QGroupBox("Width (V2 Syntax)")
        width_layout = QVBoxLayout()
        self.width_edit = QLineEdit("400")
        self.width_edit.setPlaceholderText("400 or width.panel - 2*thickness.edge...")
        
        self.width_completer = V2VariableCompleter()
        self.width_edit.setCompleter(self.width_completer)
        
        width_layout.addWidget(self.width_edit)
        width_group.setLayout(width_layout)
        layout.addRow(width_group)
        
        height_group = QGroupBox("Height (V2 Syntax)")
        height_layout = QVBoxLayout()
        self.height_edit = QLineEdit("18")
        self.height_edit.setPlaceholderText("18 or max(height.panel, 16)...")
        
        self.height_completer = V2VariableCompleter()
        self.height_edit.setCompleter(self.height_completer)
        
        height_layout.addWidget(self.height_edit)
        height_group.setLayout(height_layout)
        layout.addRow(height_group)
        
        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
        V2FormulaHighlighter(self.length_edit.document())
        V2FormulaHighlighter(self.width_edit.document())
        V2FormulaHighlighter(self.height_edit.document())
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ
        info_text = QLabel(
            "V2 Syntax Examples:\n"
            "‚Ä¢ Numbers: 600, 18.5\n"
            "‚Ä¢ References: length.panel, width.othersolution\n"
            "‚Ä¢ Formulas: width.panel - 2*thickness.edge\n"
            "‚Ä¢ Functions: sqrt, max, min, sin, cos...\n"
            "‚Ä¢ Write: variable@solution=value\n"
            "‚Ä¢ Read: variable.solution"
        )
        info_text.setStyleSheet("color: #666; font-size: 10px;")
        layout.addRow("", info_text)
        
        # –ö–Ω–æ–ø–∫–∏
        button_layout = QHBoxLayout()
        ok_button = QPushButton("Create V2")
        cancel_button = QPushButton("Cancel")
        
        ok_button.clicked.connect(self.accept)
        cancel_button.clicked.connect(self.reject)
        
        button_layout.addWidget(ok_button)
        button_layout.addWidget(cancel_button)
        
        layout.addRow(button_layout)
        self.setLayout(layout)
    
    def get_solution(self):
        try:
            name = self.name_edit.text() or "panel"
            length = self.length_edit.text() or "600"
            width = self.width_edit.text() or "400" 
            height = self.height_edit.text() or "18"
            
            solution = BoxSolution(name, length, width, height)
            return solution
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è V2: {e}")
            traceback.print_exc()
            return None

# =============================================================================
# –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π V2
# =============================================================================

class V2AdvancedMainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Visual Solving Advanced V2 - New Variable System (@solution & .solution)")
        self.setGeometry(100, 100, 1500, 1000)
        
        if CORE_V2_AVAILABLE:
            self.workspace = Part3DSpace("Main Workspace")
            v2_solution_manager.reset()
        else:
            self.workspace = None
        
        self.current_solution = None
        self.registry_window = None
        
        self._setup_ui()
        self._setup_menu()
        self._show_welcome()
    
    def _setup_ui(self):
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        layout = QHBoxLayout()
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å
        left_splitter = QSplitter(Qt.Orientation.Vertical)
        
        # –î–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π (–∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–ª—è V2)
        self.solution_tree = QTreeWidget()
        self.solution_tree.setHeaderLabel("Solutions V2 (@solution syntax)")
        self.solution_tree.itemClicked.connect(self._on_solution_selected)
        left_splitter.addWidget(self.solution_tree)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö V2
        self.variable_table = QTableWidget()
        self.variable_table.setColumnCount(6)
        self.variable_table.setHorizontalHeaderLabels([
            "Write ID (V2)", "Read ID (V2)", "Legacy ID", "Value", "Type", "Aliases"
        ])
        left_splitter.addWidget(self.variable_table)
        
        left_splitter.setSizes([400, 400])
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - 3D viewer —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π V2
        self.viewer_3d = QWidget()
        self.viewer_3d.setMinimumSize(400, 300)
        self.viewer_3d.setStyleSheet("background-color: #2a2a2a; border: 1px solid #555;")
        
        viewer_layout = QVBoxLayout()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.solution_header = QLabel("Visual Solving V2 - New Syntax")
        self.solution_header.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.solution_header.setStyleSheet("color: white; font-size: 16px; font-weight: bold; padding: 5px;")
        viewer_layout.addWidget(self.solution_header)
        
        # Placeholder for 3D
        placeholder_label = QLabel("3D Viewer V2\n(Enhanced for new syntax)")
        placeholder_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        placeholder_label.setStyleSheet("color: #888; font-size: 14px;")
        viewer_layout.addWidget(placeholder_label)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        self.solution_info = QTextEdit()
        self.solution_info.setMaximumHeight(200)
        self.solution_info.setStyleSheet("background-color: #3a3a3a; color: white; font-family: monospace;")
        viewer_layout.addWidget(self.solution_info)
        
        self.viewer_3d.setLayout(viewer_layout)
        
        main_splitter = QSplitter(Qt.Orientation.Horizontal)
        main_splitter.addWidget(left_splitter)
        main_splitter.addWidget(self.viewer_3d)
        main_splitter.setSizes([700, 800])
        
        layout.addWidget(main_splitter)
        central_widget.setLayout(layout)
    
    def _setup_menu(self):
        menubar = self.menuBar()
        
        # File menu
        file_menu = menubar.addMenu("File")
        
        new_action = QAction("New Workspace V2", self)
        new_action.triggered.connect(self._new_workspace)
        file_menu.addAction(new_action)
        
        # Create menu
        create_menu = menubar.addMenu("Create")
        
        create_box_action = QAction("Box Solution V2 (New Syntax)", self)
        create_box_action.triggered.connect(self._create_box_v2)
        create_menu.addAction(create_box_action)
        
        create_demo_action = QAction("Demo Solutions V2", self)
        create_demo_action.triggered.connect(self._create_demo_solutions_v2)
        create_menu.addAction(create_demo_action)
        
        # Variables menu  
        variables_menu = menubar.addMenu("Variables")
        
        registry_action = QAction("Global Variable Registry V2", self)
        registry_action.triggered.connect(self._show_variable_registry_v2)
        variables_menu.addAction(registry_action)
        
        # Help menu
        help_menu = menubar.addMenu("Help")
        
        syntax_help_action = QAction("V2 Syntax Help", self)
        syntax_help_action.triggered.connect(self._show_syntax_help)
        help_menu.addAction(syntax_help_action)
    
    def _show_welcome(self):
        welcome_text = """
Visual Solving Advanced V2 - Revolutionary Variable System!

üöÄ NEW V2 SYNTAX:
‚Ä¢ Write variables: length@panel=600
‚Ä¢ Read variables: width.panel, volume.box
‚Ä¢ Local aliases: L=600 (only visible within solution)
‚Ä¢ Formulas: width@result=width.panel - 2*thickness.edge

üéØ Try:
1. Create ‚Üí Box Solution V2 (New Syntax)
2. Use V2 expressions: length@box=600
3. Variables ‚Üí Global Variable Registry V2
4. Help ‚Üí V2 Syntax Help

üìã V2 Examples:
‚Ä¢ length@box=600                           # Set value
‚Ä¢ width@result=width.panel - 2*thickness.edge  # Formula
‚Ä¢ diagonal@panel=sqrt(length.panel^2 + width.panel^2)  # Math
‚Ä¢ a=volume.box                             # Read value
‚Ä¢ L=600                                    # Local alias

‚úÖ ADVANTAGES:
‚Ä¢ More intuitive than #1.length
‚Ä¢ Readable formulas
‚Ä¢ Safe aliases (isolated per solution)
‚Ä¢ Clear semantics (@ for write, . for read)
‚Ä¢ Backward compatible (#1.length still works)
        """
        self.solution_info.setText(welcome_text)
    
    def _new_workspace(self):
        if CORE_V2_AVAILABLE:
            self.workspace = Part3DSpace("Main Workspace")
            v2_solution_manager.reset()
        
        self.solution_tree.clear()
        self.variable_table.setRowCount(0)
        self.current_solution = None
        self._show_welcome()
    
    def _create_box_v2(self):
        if not CORE_V2_AVAILABLE:
            QMessageBox.warning(self, "Warning", "V2 Core system not available")
            return
        
        dialog = V2CreateBoxDialog(self)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            solution = dialog.get_solution()
            
            if solution:
                solution.place_in_space(self.workspace)
                self._add_solution_to_tree(solution)
                self._on_solution_selected_direct(solution)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é V2
                solution.debug_variables()
    
    def _create_demo_solutions_v2(self):
        """–°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è V2"""
        if not CORE_V2_AVAILABLE:
            return
        
        try:
            v2_solution_manager.reset()
            
            # Solution "panel" - –±–∞–∑–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
            panel = BoxSolution("panel", 600, 400, 18)
            panel.place_in_space(self.workspace)
            self._add_solution_to_tree(panel)
            
            # Solution "edge" - –∫—Ä–æ–º–∫–∞
            edge = EdgeBandingSolution("edge", "white", 2.0, ["top", "bottom"])
            edge.place_in_space(self.workspace)
            self._add_solution_to_tree(edge)
            
            # Solution "result" - –ø–∞–Ω–µ–ª—å —Å —É—á–µ—Ç–æ–º –∫—Ä–æ–º–∫–∏ (V2 —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!)
            result = BoxSolution(
                "result", 
                "length.panel",                    # V2 —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!
                "width.panel - 2*thickness.edge", # V2 —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!
                "height.panel"                     # V2 —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!
            )
            result.place_in_space(self.workspace)
            self._add_solution_to_tree(result)
            
            # Solution "math" - –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            math_panel = BoxSolution(
                "math",
                "sqrt(length.panel^2 + width.panel^2)",  # –î–∏–∞–≥–æ–Ω–∞–ª—å
                "max(width.panel, width.result, 350)",   # –ú–∞–∫—Å–∏–º—É–º
                "height.panel * 2"                       # –£–¥–≤–æ–µ–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞
            )
            math_panel.place_in_space(self.workspace)
            self._add_solution_to_tree(math_panel)
            
            QMessageBox.information(self, "Demo V2 Created", 
                "Demo solutions V2 created!\n\n"
                "‚Ä¢ panel: Base panel (600x400x18)\n"
                "‚Ä¢ edge: PVC Edge (thickness=2)\n" 
                "‚Ä¢ result: Panel with edge (width = width.panel - 2*thickness.edge)\n"
                "‚Ä¢ math: Math Panel (length = diagonal of panel)\n\n"
                "Open Variables ‚Üí Global Variable Registry V2 to see all V2 syntax!")
            
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Failed to create demo V2: {str(e)}")
    
    def _show_variable_registry_v2(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö V2"""
        if self.registry_window is None:
            self.registry_window = V2GlobalVariableRegistryWindow(self)
            self.registry_window.variable_updated.connect(self._on_variable_updated)
        
        self.registry_window.show()
        self.registry_window.raise_()
        self.registry_window.activateWindow()
    
    def _show_syntax_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É V2"""
        help_text = """V2 SYNTAX HELP

WRITING VARIABLES:
variable@solution=value
‚Ä¢ length@panel=600
‚Ä¢ width@result=width.panel - 2*thickness.edge
‚Ä¢ diagonal@math=sqrt(length.panel^2 + width.panel^2)

READING VARIABLES:
variable.solution
‚Ä¢ a=volume.panel
‚Ä¢ diagonal=length.panel
‚Ä¢ maxsize=max(length.panel, width.panel)

LOCAL ALIASES:
alias=value (only within solution)
‚Ä¢ L=600          # Local alias for length
‚Ä¢ W=400          # Local alias for width
‚Ä¢ H=18           # Local alias for height

RULES:
‚úÖ @ symbol: for writing and setting values
‚úÖ . symbol: for reading values only
‚úÖ Aliases: cannot contain @ or . symbols
‚úÖ Scope: aliases are isolated per solution
‚úÖ Backward compatibility: #1.length still works

EXAMPLES:
Assignment:    length@box=600
Formula:       width@result=width.panel - 2*thickness.edge
Math:          diagonal@panel=sqrt(length.panel^2 + width.panel^2)
Read:          a=volume.box
Alias:         L=600

FUNCTIONS AVAILABLE:
sin, cos, tan, sqrt, abs, min, max, round

BENEFITS:
‚Ä¢ More intuitive than #1.length
‚Ä¢ Readable formulas
‚Ä¢ Safe aliases (isolated per solution)
‚Ä¢ Clear semantics (@ write, . read)
‚Ä¢ Natural syntax
"""
        
        msg = QMessageBox(self)
        msg.setWindowTitle("V2 Syntax Help")
        msg.setText(help_text)
        msg.setTextFormat(Qt.TextFormat.PlainText)
        msg.exec()
    
    def _add_solution_to_tree(self, solution):
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –≤ –¥–µ—Ä–µ–≤–æ"""
        item = QTreeWidgetItem(self.solution_tree)
        item.setText(0, f"{solution.name} (V2)")
        item.setData(0, Qt.ItemDataRole.UserRole, solution)
        return item
    
    def _on_solution_selected(self, item, column):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ—à–µ–Ω–∏—è"""
        solution = item.data(0, Qt.ItemDataRole.UserRole)
        if solution:
            self._on_solution_selected_direct(solution)
    
    def _on_solution_selected_direct(self, solution):
        """–ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ—à–µ–Ω–∏—è"""
        self.current_solution = solution
        self._update_variable_table(solution)
        self._update_solution_info(solution)
    
    def _update_variable_table(self, solution):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö V2"""
        variables = solution.get_all_variables()
        self.variable_table.setRowCount(len(variables))
        
        for row, var in enumerate(variables):
            # Write ID (V2)
            write_id_item = QTableWidgetItem(var.new_write_id)
            write_id_item.setForeground(QColor("#cc6600"))
            self.variable_table.setItem(row, 0, write_id_item)
            
            # Read ID (V2)
            read_id_item = QTableWidgetItem(var.new_read_id)
            read_id_item.setForeground(QColor("#0066cc"))
            self.variable_table.setItem(row, 1, read_id_item)
            
            # Legacy ID
            legacy_id_item = QTableWidgetItem(var.legacy_full_id)
            legacy_id_item.setForeground(QColor("#999999"))
            self.variable_table.setItem(row, 2, legacy_id_item)
            
            # Value
            value_str = str(var.value)
            if isinstance(var.value, float):
                value_str = f"{var.value:.3f}"
            self.variable_table.setItem(row, 3, QTableWidgetItem(value_str))
            
            # Type
            var_type = "formula" if var.v2_variable.is_formula else "value"
            type_item = QTableWidgetItem(var_type)
            if var_type == "formula":
                type_item.setForeground(QColor("#cc6600"))
            self.variable_table.setItem(row, 4, type_item)
            
            # Aliases
            aliases_str = ", ".join(var.aliases)
            self.variable_table.setItem(row, 5, QTableWidgetItem(aliases_str))
    
    def _update_solution_info(self, solution):
        """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—à–µ–Ω–∏–∏"""
        info = f"Solution V2: {solution.name}\n"
        info += f"Type: {type(solution).__name__}\n"
        info += f"Variables: {len(solution.variables)}\n"
        info += "-" * 40 + "\n"
        
        info += "V2 VARIABLE SYSTEM:\n"
        for var in solution.get_all_variables():
            info += f"  Write: {var.new_write_id} = {var.value}\n"
            info += f"  Read:  {var.new_read_id}\n"
            if var.legacy_full_id:
                info += f"  Legacy: {var.legacy_full_id}\n"
            
            if var.v2_variable.is_formula:
                info += f"  Formula: {var.v2_variable.formula}\n"
            
            if var.aliases:
                info += f"  Aliases: {', '.join(var.aliases)}\n"
            info += "\n"
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ç–∏–ø–æ–≤ —Ä–µ—à–µ–Ω–∏–π
        if isinstance(solution, BoxSolution):
            info += "BOX DIMENSIONS V2:\n"
            info += f"  Length: {solution.length:.1f} mm\n"
            info += f"  Width: {solution.width:.1f} mm\n"
            info += f"  Height: {solution.height:.1f} mm\n"
        
        self.solution_info.setText(info)
    
    def _on_variable_updated(self, variable_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π"""
        if self.current_solution:
            self._update_variable_table(self.current_solution)
            self._update_solution_info(self.current_solution)

def main():
    app = QApplication(sys.argv)
    app.setStyle('Fusion')
    
    if not CORE_V2_AVAILABLE:
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Icon.Critical)
        msg.setWindowTitle("V2 Core Error")
        msg.setText("Advanced V2 core system not found")
        msg.setInformativeText("variable_system_v2.py or visual_solving_advanced_v2.py not found or has errors")
        msg.setStandardButtons(QMessageBox.StandardButton.Ok)
        msg.exec()
        return
    
    window = V2AdvancedMainWindow()
    window.show()
    
    sys.exit(app.exec())

if __name__ == "__main__":
    main()
