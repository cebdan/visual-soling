#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Visual Solving Advanced Demo V2 - –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å –Ω–æ–≤–æ–π —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
–ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π
"""

import sys
import os
import traceback

# Add current directory to path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    missing = []
    
    try:
        import PyQt6
        print("‚úÖ PyQt6 –Ω–∞–π–¥–µ–Ω")
    except ImportError:
        missing.append("PyQt6")
        print("‚ùå PyQt6 –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    try:
        import numpy
        print("‚úÖ NumPy –Ω–∞–π–¥–µ–Ω")
    except ImportError:
        missing.append("numpy") 
        print("‚ùå NumPy –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    try:
        from variable_system_v2 import ExpressionParser, V2FormulaEvaluator
        print("‚úÖ Variable System V2 –Ω–∞–π–¥–µ–Ω")
        v2_available = True
    except ImportError as e:
        print(f"‚ùå Variable System V2 –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        v2_available = False
    
    try:
        from visual_solving_advanced_v2 import (
            HybridBoxSolution, v2_solution_manager, 
            demo_hybrid_system, demo_expression_parsing
        )
        print("‚úÖ Advanced V2 —è–¥—Ä–æ –Ω–∞–π–¥–µ–Ω–æ")
        advanced_v2_available = True
    except ImportError as e:
        print(f"‚ùå Advanced V2 —è–¥—Ä–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {e}")
        advanced_v2_available = False
    
    try:
        from complete_startup_system_v2 import (
            StartupManager, NewSolutionDialog, GlobalVariablesDialog,
            global_variable_registry
        )
        print("‚úÖ Startup System V2 –Ω–∞–π–¥–µ–Ω")
        startup_available = True
    except ImportError as e:
        print(f"‚ùå Startup System V2 –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        startup_available = False
    
    try:
        from visual_solving_ui_advanced_v2 import V2AdvancedMainWindow
        print("‚úÖ UI Advanced V2 –Ω–∞–π–¥–µ–Ω")
        ui_available = True
    except ImportError as e:
        print(f"‚ùå UI Advanced V2 –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        ui_available = False
    
    return missing, v2_available and advanced_v2_available and startup_available and ui_available

def run_console_demo():
    """–ö–æ–Ω—Å–æ–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã V2 (–±–µ–∑ GUI)"""
    try:
        from visual_solving_advanced_v2 import (
            HybridBoxSolution, HybridEdgeBandingSolution, Part3DSpace,
            v2_solution_manager, V2GlobalVariableRegistry,
            demo_hybrid_system, demo_expression_parsing,
            ExpressionParser
        )
        from variable_system_v2 import demo_new_syntax
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ V2 —è–¥—Ä–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã variable_system_v2.py –∏ visual_solving_advanced_v2.py –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ")
        return False
    
    print("=" * 80)
    print("VISUAL SOLVING ADVANCED V2 - –ö–û–ù–°–û–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø")
    print("=" * 80)
    
    print("üöÄ –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
    print("   ‚Ä¢ –ù–æ–≤–∞—è –∞–¥—Ä–µ—Å–∞—Ü–∏—è: variable@solution=value")
    print("   ‚Ä¢ –ß—Ç–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É: a=variable.solution")
    print("   ‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã–µ –∞–ª–∏–∞—Å—ã: L, W, H (–±–µ–∑ @ –∏ —Ç–æ—á–∫–∏)")
    print("   ‚Ä¢ –ß–∏—Ç–∞–µ–º—ã–µ —Ñ–æ—Ä–º—É–ª—ã: width.panel - 2*thickness.edge")
    print("   ‚Ä¢ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: #1.length –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("   ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –∞–ª–∏–∞—Å—ã –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã –≤ Solution")
    print()
    
    print("1. –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• V2")
    print("-" * 35)
    demo_new_syntax()
    print()
    
    print("2. –ì–ò–ë–†–ò–î–ù–ê–Ø –°–ò–°–¢–ï–ú–ê (V2 + Legacy)")
    print("-" * 40)
    demo_hybrid_system()
    print()
    
    print("3. –ü–ê–†–°–ò–ù–ì –ù–û–í–´–• –í–´–†–ê–ñ–ï–ù–ò–ô")
    print("-" * 30)
    demo_expression_parsing()
    print()
    
    print("4. –ì–õ–û–ë–ê–õ–¨–ù–´–ô –†–ï–ï–°–¢–† V2")
    print("-" * 25)
    demo_global_registry_v2()
    print()
    
    print("5. –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï V2")
    print("-" * 38)
    demo_interactive_testing_v2()
    
    print("\n" + "=" * 80)
    print("–ö–û–ù–°–û–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø V2 –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 80)
    
    print("\nüéØ –ö–õ–Æ–ß–ï–í–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø V2:")
    print("   ‚úÖ –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–∞—è –∞–¥—Ä–µ—Å–∞—Ü–∏—è: variable@solution")
    print("   ‚úÖ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ: variable.solution")
    print("   ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∞–ª–∏–∞—Å—ã: –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã –≤ Solution")
    print("   ‚úÖ –ß–∏—Ç–∞–µ–º—ã–µ —Ñ–æ—Ä–º—É–ª—ã: width.panel - 2*thickness.edge")
    print("   ‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: #1.length —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è: @ –∏ —Ç–æ—á–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω—ã –≤ –∞–ª–∏–∞—Å–∞—Ö")
    
    print("\nüìã –ü–†–ò–ú–ï–†–´ –ù–û–í–û–ì–û –°–ò–ù–¢–ê–ö–°–ò–°–ê:")
    print("   length@box=600                           # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è")
    print("   width@result=width.panel - 2*thickness.edge  # –§–æ—Ä–º—É–ª–∞")
    print("   a=volume.box                             # –ß—Ç–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è")
    print("   L=600                                    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–ª–∏–∞—Å")
    
    return True

def demo_global_registry_v2():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞ V2"""
    from visual_solving_advanced_v2 import V2GlobalVariableRegistry
    
    print("–í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º–µ V2:")
    variables_info = V2GlobalVariableRegistry.get_all_variables_info()
    
    for var_info in variables_info:
        solution_name = var_info.get('solution_name', 'Unknown')
        print(f"  {var_info.get('new_write_id', '')}: {var_info.get('name', '')}")
        
        if var_info.get('is_formula', False):
            formula = var_info.get('formula', '')
            computed = var_info.get('computed_value', 0)
            print(f"    Formula: {formula} ‚Üí {computed}")
        else:
            value = var_info.get('value', '')
            print(f"    Value: {value}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–ø–æ—Å–æ–±—ã –æ–±—Ä–∞—â–µ–Ω–∏—è
        legacy_id = var_info.get('legacy_full_id', '')
        read_id = var_info.get('new_read_id', '')
        if legacy_id:
            print(f"    Legacy: {legacy_id}")
        if read_id:
            print(f"    Read: {read_id}")
    
    print(f"\n–í—Å–µ–≥–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {len(variables_info)}")

def demo_interactive_testing_v2():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        from visual_solving_advanced_v2 import (
            HybridBoxSolution, HybridEdgeBandingSolution,
            v2_solution_manager, ExpressionParser
        )
        
        print("üß™ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï V2")
        print("=" * 35)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è
        v2_solution_manager.reset()
        panel = HybridBoxSolution("panel", 600, 400, 18)
        edge = HybridEdgeBandingSolution("edge", "white", 2.0, ["top"])
        
        print("–°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print(f"  panel: length@panel={panel.length}")
        print(f"  edge: thickness@edge={edge.get_variable_by_reference('thickness').value}")
        
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
        for var in panel.get_all_variables():
            print(f"  {var.new_write_id}: {var.value}")
        
        print("\n–ü—Ä–∏–º–µ—Ä—ã –≤—ã—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("  length@panel=800")
        print("  width@result=width.panel - 2*thickness.edge")  
        print("  diagonal@panel=sqrt(length.panel^2 + width.panel^2)")
        print("  L=600  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–ª–∏–∞—Å")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–π
        test_expressions = [
            "length@panel=800",
            "width@result=width.panel - 2*thickness.edge",
            "diagonal@panel=sqrt(length.panel^2 + width.panel^2)"
        ]
        
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–π:")
        for expr in test_expressions:
            try:
                parsed = ExpressionParser.parse_expression(expr)
                print(f"  ‚úÖ {expr} ‚Üí {parsed['type'].value}")
            except Exception as e:
                print(f"  ‚ùå {expr} ‚Üí {e}")
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")

def run_interactive_formula_test_v2():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—É–ª V2"""
    try:
        from visual_solving_advanced_v2 import (
            HybridBoxSolution, HybridEdgeBandingSolution, v2_solution_manager,
            ExpressionParser
        )
        from variable_system_v2 import V2FormulaEvaluator
        
        print("üß™ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–û–†–ú–£–õ V2")
        print("=" * 45)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è
        v2_solution_manager.reset()
        panel = HybridBoxSolution("panel", 600, 400, 18)
        edge = HybridEdgeBandingSolution("edge", "white", 2.0, ["top"])
        
        print("–°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print(f"  panel: {panel.length}x{panel.width}x{panel.height}")
        print(f"  edge: thickness={edge.get_variable_by_reference('thickness').value}")
        
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º—É–ª:")
        print("  length.panel, width.panel, height.panel")
        print("  thickness.edge, material.edge")
        
        print("\n–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º—É–ª:")
        print("  width.panel - 2*thickness.edge")
        print("  sqrt(length.panel^2 + width.panel^2)")
        print("  max(length.panel, width.panel, height.panel)")
        print("–í–≤–µ–¥–∏—Ç–µ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        
        solution_registry = v2_solution_manager.get_all_solutions()
        
        while True:
            try:
                formula = input("\nFormula V2> ").strip()
                
                if formula.lower() in ['quit', 'q', 'exit']:
                    break
                
                if not formula:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ä–º—É–ª–∞
                if '=' in formula:
                    # –≠—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ - –ø–∞—Ä—Å–∏–º –µ–≥–æ
                    parsed = ExpressionParser.parse_expression(formula)
                    print(f"‚úÖ –í—ã—Ä–∞–∂–µ–Ω–∏–µ: {parsed['type'].value}")
                    for key, value in parsed.items():
                        if key != 'type':
                            print(f"   {key}: {value}")
                else:
                    # –≠—Ç–æ —Ñ–æ—Ä–º—É–ª–∞ - –≤—ã—á–∏—Å–ª—è–µ–º –µ—ë
                    result = V2FormulaEvaluator.evaluate_formula(formula, solution_registry)
                    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            except KeyboardInterrupt:
                break
        
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")

# =============================================================================
# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
# =============================================================================

def run_main_application():
    """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
    from PyQt6.QtWidgets import QApplication, QMessageBox
    from PyQt6.QtCore import QDialog
    
    app = QApplication(sys.argv)
    app.setStyle('Fusion')
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        from complete_startup_system_v2 import StartupManager, global_variable_registry
        from visual_solving_ui_advanced_v2 import V2AdvancedMainWindow
        from visual_solving_advanced_v2 import v2_solution_manager, HybridBoxSolution
        
        print("üöÄ –ó–∞–ø—É—Å–∫ Visual Solving Advanced V2...")
        print("=" * 50)
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        startup_manager = StartupManager()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–∫–Ω–æ
        result = startup_manager.show_startup_dialog()
        
        if result == QDialog.DialogCode.Accepted:
            print("‚úÖ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º—É V2
            _initialize_global_variables()
            
            # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
            print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞...")
            main_window = V2AdvancedMainWindow()
            
            # –ï—Å–ª–∏ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
            _setup_demo_data_if_needed(main_window)
            
            main_window.show()
            print("‚úÖ –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            _show_welcome_info(main_window)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            sys.exit(app.exec())
            
        else:
            print("‚ùå –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            sys.exit(0)
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –æ—à–∏–±–∫–∏
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Icon.Critical)
        msg.setWindowTitle("Startup Error")
        msg.setText("Failed to load Visual Solving V2 components")
        msg.setDetailedText(f"Import error: {str(e)}\n\nPlease ensure all required files are present:\n- variable_system_v2.py\n- visual_solving_advanced_v2.py\n- complete_startup_system_v2.py\n- visual_solving_ui_advanced_v2.py")
        msg.exec()
        
        sys.exit(1)
    
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        traceback.print_exc()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Icon.Critical)
        msg.setWindowTitle("Critical Error")
        msg.setText("Critical startup error occurred")
        msg.setDetailedText(f"Error: {str(e)}\n\nStacktrace:\n{traceback.format_exc()}")
        msg.exec()
        
        sys.exit(1)

def _initialize_global_variables():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ V2 —Å–∏—Å—Ç–µ–º–µ"""
    from complete_startup_system_v2 import global_variable_registry
    
    global_vars = global_variable_registry.get_all_variables()
    print(f"üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {len(global_vars)} –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...")
    
    for var in global_vars:
        print(f"   {var.name} ({var.var_type}) = {var.value}")

def _setup_demo_data_if_needed(main_window):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    from visual_solving_advanced_v2 import v2_solution_manager, HybridBoxSolution, HybridEdgeBandingSolution, Part3DSpace
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ—à–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
    existing_solutions = v2_solution_manager.get_all_solutions()
    
    if not existing_solutions:
        print("üéØ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
            workspace = Part3DSpace("Demo Workspace")
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Ä–µ—à–µ–Ω–∏—è
            panel = HybridBoxSolution("demo_panel", 600, 400, 18)
            panel.place_in_space(workspace)
            
            edge = HybridEdgeBandingSolution("demo_edge", "white", 2.0, ["top", "bottom"])
            edge.place_in_space(workspace)
            
            # –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è –ø–∞–Ω–µ–ª—å —Å V2 —Ñ–æ—Ä–º—É–ª–∞–º–∏
            result = HybridBoxSolution(
                "demo_result",
                "length.demo_panel",
                "width.demo_panel - 2*thickness.demo_edge",
                "height.demo_panel"
            )
            result.place_in_space(workspace)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º workspace –≤ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
            main_window.workspace = workspace
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            main_window._add_solution_to_tree(panel)
            main_window._add_solution_to_tree(edge)
            main_window._add_solution_to_tree(result)
            
            print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö: {e}")

def _show_welcome_info(main_window):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    from PyQt6.QtWidgets import QMessageBox
    
    welcome_text = """üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Visual Solving V2!

üöÄ –ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò V2:
‚Ä¢ –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –∞–¥—Ä–µ—Å–∞—Ü–∏—è: variable@solution=value
‚Ä¢ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ: variable.solution  
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∞–ª–∏–∞—Å—ã: L, W, H (–∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã –≤ Solution)
‚Ä¢ –ß–∏—Ç–∞–µ–º—ã–µ —Ñ–æ—Ä–º—É–ª—ã: width.panel - 2*thickness.edge
‚Ä¢ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: –¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑ –ª—é–±–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è

üìã –ë–´–°–¢–†–´–ô –°–¢–ê–†–¢:
1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–µ–Ω—é "Create"
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ V2 —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤ —Ñ–æ—Ä–º—É–ª–∞—Ö
3. –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
4. –ò—Å—Å–ª–µ–¥—É–π—Ç–µ Global Variable Registry V2

üí° –ü–†–ò–ú–ï–†–´ V2 –°–ò–ù–¢–ê–ö–°–ò–°–ê:
‚Ä¢ length@panel=600
‚Ä¢ width@result=width.panel - 2*thickness.edge
‚Ä¢ diagonal=sqrt(length.panel^2 + width.panel^2)

–ü—Ä–∏—è—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã! üõ†Ô∏è"""
    
    QMessageBox.information(main_window, "Welcome to Visual Solving V2", welcome_text)

def run_gui_v2():
    """–ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ V2 (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥)"""
    print("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ run_main_application() –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É...")
    run_main_application()

def show_help_v2():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ V2"""
    print("Visual Solving Advanced V2 Demo Runner")
    print("=====================================")
    print()
    print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    print("  python run_advanced_demo_v2.py           - –∑–∞–ø—É—Å–∫ —Å GUI –∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π")
    print("  python run_advanced_demo_v2.py --console - –∫–æ–Ω—Å–æ–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è V2")
    print("  python run_advanced_demo_v2.py --check   - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    print("  python run_advanced_demo_v2.py --formula - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—É–ª V2")
    print("  python run_advanced_demo_v2.py --help    - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞")
    print()
    print("–§–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã V2:")
    print("  variable_system_v2.py                    - –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
    print("  visual_solving_advanced_v2.py            - –≥–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (V2 + Legacy)")
    print("  complete_startup_system_v2.py            - —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏ –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
    print("  visual_solving_ui_advanced_v2.py         - UI —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π V2")
    print("  run_advanced_demo_v2.py                  - —ç—Ç–æ—Ç —Ñ–∞–π–ª (–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫)")
    print()
    print("üöÄ –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò V2:")
    print("   ‚Ä¢ –ù–æ–≤–∞—è –∞–¥—Ä–µ—Å–∞—Ü–∏—è: variable@solution=value")
    print("   ‚Ä¢ –ß—Ç–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É: a=variable.solution")
    print("   ‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã–µ –∞–ª–∏–∞—Å—ã: L, W, H (–∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã –≤ Solution)")
    print("   ‚Ä¢ –ß–∏—Ç–∞–µ–º—ã–µ —Ñ–æ—Ä–º—É–ª—ã: width.panel - 2*thickness.edge")
    print("   ‚Ä¢ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: –¥–æ—Å—Ç—É–ø–Ω—ã –≤–µ–∑–¥–µ")
    print("   ‚Ä¢ –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏: New/Open Solution")
    print("   ‚Ä¢ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: #1.length —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("   ‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–ª–∏–∞—Å–æ–≤: @ –∏ —Ç–æ—á–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω—ã")
    print()
    print("üîß –ü–†–ò–ú–ï–†–´ –ù–û–í–û–ì–û –°–ò–ù–¢–ê–ö–°–ò–°–ê:")
    print("   length@box=600                           # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è")
    print("   width@result=width.panel - 2*thickness.edge  # –§–æ—Ä–º—É–ª–∞ —Å —Å—Å—ã–ª–∫–∞–º–∏")
    print("   diagonal@panel=sqrt(length.panel^2 + width.panel^2)  # –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
    print("   a=volume.box                             # –ß—Ç–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è")
    print("   L=600                                    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–ª–∏–∞—Å")
    print()
    print("üìã –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê V2:")
    print("   ‚úÖ –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ—Å—Ç—å - variable@solution –ø–æ–Ω—è—Ç–Ω–µ–µ #1.length")
    print("   ‚úÖ –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å - width.panel - 2*thickness.edge")
    print("   ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –∞–ª–∏–∞—Å—ã –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã –≤ Solution")
    print("   ‚úÖ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ - @ –¥–ª—è –∑–∞–ø–∏—Å–∏, —Ç–æ—á–∫–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è")
    print("   ‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - —Å—Ç–∞—Ä—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("   ‚úÖ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ - —É–¥–æ–±–Ω—ã–π –∑–∞–ø—É—Å–∫")
    print()
    print("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:")
    print("  Python 3.9+, PyQt6, NumPy")

if __name__ == "__main__":
    if len(sys.argv) > 1:
        arg = sys.argv[1]
        
        if arg == "--console":
            # –ö–æ–Ω—Å–æ–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ GUI
            missing, v2_available = check_dependencies()
            if missing:
                print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing)}")
                print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install " + " ".join(missing))
                sys.exit(1)
            elif not v2_available:
                print("\n‚ùå V2 —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                sys.exit(1)
            else:
                run_console_demo()
                
        elif arg == "--check":
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            missing, v2_available = check_dependencies()
            if missing or not v2_available:
                print(f"\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏")
                sys.exit(1)
            else:
                print("\n‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã V2 –¥–æ—Å—Ç—É–ø–Ω—ã")
                
        elif arg == "--formula":
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—É–ª
            run_interactive_formula_test_v2()
            
        elif arg in ["--help", "-h"]:
            # –°–ø—Ä–∞–≤–∫–∞
            show_help_v2()
            
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: {arg}")
            print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
            sys.exit(1)
    else:
        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º GUI —Å —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        missing, all_available = check_dependencies()
        
        if missing:
            print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing)}")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install " + " ".join(missing))
            sys.exit(1)
        
        if not all_available:
            print("\n‚ùå –ù–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã V2 –¥–æ—Å—Ç—É–ø–Ω—ã")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã V2 –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ:")
            print("  - variable_system_v2.py")
            print("  - visual_solving_advanced_v2.py") 
            print("  - complete_startup_system_v2.py")
            print("  - visual_solving_ui_advanced_v2.py")
            sys.exit(1)
        
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã V2 –Ω–∞–π–¥–µ–Ω—ã")
        print()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        run_main_application()
